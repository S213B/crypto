1.  Convert hex to base64                          (hex2b64.py)
2.  Fixed XOR                                      (xor2str.py)
3.  Single-byte XOR cipher                         (single_byte_xor_cipher.py)
4.  Detect single-character XOR                    (detect_single_c_xor.py)
5.  Implement repeating-key XOR                    (xor_encrypt.py)
6.  Break repeating-key XOR                        (rep_xor_decrypt.py)
7.  AES in ECB mode                                (aes_128_ecb.py)
8.  Detect AES in ECB mode                         (ecb_detect.py)
9.  Implement PKCS#7 padding                       (pkcs7.py)
10. Implement CBC mode                             (cbc_mode.py)
11. An ECB/CBC detection oracle                    (ecb_cbc_detect.py)
12. Byte-at-a-time ECB decryption (Simple)         (byte_at_a_time_ecb_decryption.py)
13. ECB cut-and-paste                              (ecb_cut_paste.py)
14. Byte-at-a-time ECB decryption (Harder)         (byte_at_a_time_ecb_decryption2.py)
15. PKCS#7 padding validation                      (pkcs7.py)
16. CBC bitflipping attacks                        (cbc_bitflip_atk.py)
17. The CBC padding oracle
18. Implement CTR, the stream cipher mode
19. Break fixed-nonce CTR mode using substitutions
20. Break fixed-nonce CTR statistically
21. Implement the MT19937 Mersenne Twister RNG
22. Crack an MT19937 seed
23. Clone an MT19937 RNG from its output
24. Create the MT19937 stream cipher and break it

Misc:
ham_dis.py                             : calculate hamming distance
test_ecb_cbc.py                        : run ecb_cbc_detect.py 30 times to test correctness
my_rand.py                             : generate random object
test_byte_at_a_time_ecb_decryption2.py : run byte_at_a_time_ecb_decryption2.py 30 times to test correctness
